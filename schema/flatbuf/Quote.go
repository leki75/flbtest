// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Quote struct {
	_tab flatbuffers.Table
}

func GetRootAsQuote(buf []byte, offset flatbuffers.UOffsetT) *Quote {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Quote{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsQuote(buf []byte, offset flatbuffers.UOffsetT) *Quote {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Quote{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Quote) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Quote) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Quote) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Quote) BidExchange() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Quote) MutateBidExchange(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Quote) BidPrice() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Quote) MutateBidPrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *Quote) BidSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Quote) MutateBidSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *Quote) AskExchange() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Quote) MutateAskExchange(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *Quote) AskPrice() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Quote) MutateAskPrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func (rcv *Quote) AskSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Quote) MutateAskSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *Quote) Timestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Quote) MutateTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(18, n)
}

func (rcv *Quote) Conditions(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Quote) ConditionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Quote) ConditionsBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Quote) MutateConditions(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Quote) Nbbo() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Quote) MutateNbbo(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *Quote) Tape() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Quote) MutateTape(n byte) bool {
	return rcv._tab.MutateByteSlot(24, n)
}

func (rcv *Quote) ReceivedAt() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Quote) MutateReceivedAt(n uint64) bool {
	return rcv._tab.MutateUint64Slot(26, n)
}

func QuoteStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func QuoteAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(symbol), 0)
}
func QuoteAddBidExchange(builder *flatbuffers.Builder, bidExchange byte) {
	builder.PrependByteSlot(1, bidExchange, 0)
}
func QuoteAddBidPrice(builder *flatbuffers.Builder, bidPrice float64) {
	builder.PrependFloat64Slot(2, bidPrice, 0.0)
}
func QuoteAddBidSize(builder *flatbuffers.Builder, bidSize uint32) {
	builder.PrependUint32Slot(3, bidSize, 0)
}
func QuoteAddAskExchange(builder *flatbuffers.Builder, askExchange byte) {
	builder.PrependByteSlot(4, askExchange, 0)
}
func QuoteAddAskPrice(builder *flatbuffers.Builder, askPrice float64) {
	builder.PrependFloat64Slot(5, askPrice, 0.0)
}
func QuoteAddAskSize(builder *flatbuffers.Builder, askSize uint32) {
	builder.PrependUint32Slot(6, askSize, 0)
}
func QuoteAddTimestamp(builder *flatbuffers.Builder, timestamp uint64) {
	builder.PrependUint64Slot(7, timestamp, 0)
}
func QuoteAddConditions(builder *flatbuffers.Builder, conditions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(conditions), 0)
}
func QuoteStartConditionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func QuoteAddNbbo(builder *flatbuffers.Builder, nbbo bool) {
	builder.PrependBoolSlot(9, nbbo, false)
}
func QuoteAddTape(builder *flatbuffers.Builder, tape byte) {
	builder.PrependByteSlot(10, tape, 0)
}
func QuoteAddReceivedAt(builder *flatbuffers.Builder, receivedAt uint64) {
	builder.PrependUint64Slot(11, receivedAt, 0)
}
func QuoteEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
